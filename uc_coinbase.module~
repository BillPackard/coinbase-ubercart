<?php

require_once(dirname(__FILE__). "/coinbase-php/lib/Coinbase.php");

function uc_coinbase_uc_payment_method() {
  $methods['coinbase'] = array(
    'id' => 'coinbase_bitcoin',
    'name' => t('Bitcoin (Coinbase)'),
    'title' => t('Bitcoin'),
    'desc' => t('Accept Bitcoin payments with Coinbase.'),
    'callback' => 'uc_payment_method_coinbase',
    'redirect' => 'uc_coinbase_form',
    'weight' => 1,
    'checkout' => FALSE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

function uc_payment_method_coinbase($op, $order) {
  switch ($op)  {
    case 'settings':
      $client_id = variable_get('uc_coinbase_oauth_clientid');
      $client_secret = variable_get('uc_coinbase_oauth_clientsecret');
      $tokens = variable_get('uc_coinbase_oauth_tokens');
      $account_connected = $tokens != NULL;
      
      $redirect_url_with_params = url('uc_coinbase/oauth_callback', array('absolute' => true));
      $redirect_url = preg_replace('/\?.*/', '', $redirect_url_with_params);
      $oauth = new Coinbase_Oauth($client_id, $client_secret, $redirect_url_with_params);
      $authorize_url = $oauth->createAuthorizeUrl('merchant');
      variable_set('uc_coinbase_oauth_last_redirect_url', $redirect_url_with_params);
    
      $form['uc_coinbase_status'] = array(
        '#markup' => "<p>" . ($account_connected ?
          '<b>Merchant account connected!</b> You\'re ready to accept bitcoin payments.' :
          '<b>No merchant account connected.</b>') . "</p>",
      );
    
      if (!$account_connected) {
        if ($client_id == NULL) {
          # Need to create an OAuth application
          $form['uc_coinbase_instructions'] = array(
            '#markup' => "<p>To connect a merchant account, <a href='https://coinbase.com/oauth/applications/new'>click here</a> and enter the following values:<br>
                          <ul class='coinbase-wpe-list'>
                                  <li>Name: a name for this Ubercart installation.</li>
                                  <li>Redirect URL: <input type='text' value='$redirect_url' class='form-text' readonly></li>
                          </ul>
                          Then, copy the generated Client ID and Client Secret below. <b>After saving, return to this page to finish connecting a merchant account!</b></p>",
          );
        } else {
          # Need to authorize app
          $form['uc_coinbase_instructions'] = array(
            '#markup' => "<p>Last step: to finish connecting your merchant account, <a href='$authorize_url'>click here</a> and log in with your merchant account.</p>",
          );
        }
        $form['uc_coinbase_oauth_clientid'] = array(
          '#type' => 'textfield',
          '#title' => t('Client ID'),
          '#description' => t(''),
          '#default_value' => variable_get('uc_coinbase_oauth_clientid'),
        );
        $form['uc_coinbase_oauth_clientsecret'] = array(
          '#type' => 'textfield',
          '#title' => t('Client Secret'),
          '#description' => t(''),
          '#default_value' => variable_get('uc_coinbase_oauth_clientsecret'),
        );
      } else {
        # Ready to accept payments!
        $form['uc_coinbase_disconnect'] = array(
            '#markup' => "<script type='text/javascript'>
            function uc_coinbase_disconnect() {
              document.getElementsByName('uc_coinbase_oauth_clientid')[0].value = '';
              document.getElementsByName('uc_coinbase_oauth_clientsecret')[0].value = '';
              document.getElementsByName('uc_coinbase_oauth_tokens')[0].value = '';
              
              var form = document.getElementsByName('uc_coinbase_oauth_tokens')[0].form;
              HTMLFormElement.prototype.submit.call(form);
            }
            </script><p><a href='javascript:uc_coinbase_disconnect();'>Disconnect merchant account</a></p>",
          );
        $form['uc_coinbase_oauth_clientid'] = array(
          '#type' => 'hidden',
          '#default_value' => variable_get('uc_coinbase_oauth_clientid'),
        );
        $form['uc_coinbase_oauth_clientsecret'] = array(
          '#type' => 'hidden',
          '#default_value' => variable_get('uc_coinbase_oauth_clientsecret'),
        );
        $form['uc_coinbase_oauth_tokens'] = array(
          '#type' => 'hidden',
          '#default_value' => variable_get('uc_coinbase_oauth_clientsecret'),
        );
      }
      
      return $form;
  }

}

function uc_coinbase_form($form, &$form_state, $order) {

  $tokens = variable_get('uc_coinbase_oauth_tokens');
  if ($tokens == NULL) {
    drupal_set_message(t('Sorry, but your payment could not be processed. The Coinbase plugin has not been set up.'));
    drupal_goto('cart');
    return;
  }

  $secret = variable_get('uc_coinbase_secret');
  if ($secret === NULL) {
    $secret = sha1(mt_rand());
    variable_set('uc_coinbase_secret', $secret);
  }

  $title = 'Order #' . $order->order_id;
  $price = uc_currency_format($order->order_total, FALSE, FALSE, '.');
  $currency = $order->currency;

  // Include secret in custom parameter so that orders cannot be spoofed across different installations of the plugin
  $custom = base64_encode(serialize(array(
    "order_id" => $order->order_id,
    "secret" => sha1($secret), // Note a hash of the secret is used (not the actual secret) because the custom param is sometimes leaked (it SHOULD NOT be leaked, but this is extra-safe)
  )));

  $params = array(
    'description' => $title,
    'callback_url' => url('uc_coinbase/callback', array('absolute' => true, 'query' => array("coinbase_secret" => $secret))),
    'success_url' => url('uc_coinbase/success', array('absolute' => true)),
    'info_url' => url('<front>', array('absolute' => true)),
    'cancel_url' => url('uc_coinbase/cancel', array('absolute' => true)),
    'custom_secure' => true,
  );

  $clientId = variable_get('uc_coinbase_oauth_clientid');
  $clientSecret = variable_get('uc_coinbase_oauth_clientsecret');
  $oauth = new Coinbase_OAuth($clientId, $clientSecret, "");
  $coinbase = new Coinbase($oauth, unserialize($tokens));
  $response = $coinbase->createButton($title, $price, $currency, $custom, $params);

  $form['#action'] = 'https://coinbase.com/checkouts/' . $response->button->code;
  $form['#method'] = 'get';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
  );
  return $form;
}

function uc_coinbase_menu() {

  // Success page
  $items['uc_coinbase/success'] = array(
    'title' => 'Bitcoin payment successful',
    'page callback' => 'uc_coinbase_success',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coinbase.pages.inc',
  );
  // Cancel page
  $items['uc_coinbase/cancel'] = array(
    'title' => 'Bitcoin payment canceled',
    'page callback' => 'uc_coinbase_cancel',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coinbase.pages.inc',
  );
  // OAuth callback page
  $items['uc_coinbase/oauth_callback'] = array(
    'title' => 'Coinbase for Ubercart setup',
    'page callback' => 'uc_coinbase_oauth_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coinbase.pages.inc',
  );
  // Callback page
  $items['uc_coinbase/callback'] = array(
    'title' => 'Coinbase callback',
    'page callback' => 'uc_coinbase_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_coinbase.pages.inc',
  );
  return $items;
}
